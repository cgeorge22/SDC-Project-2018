<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item key="isRegEx" value="false"/>
		<item key="selection" value="file = new"/>
		<item key="casesensitive" value="false"/>
		<item key="incremental" value="false"/>
		<item key="wrap" value="true"/>
		<item key="wholeword" value="false"/>
		<list key="findhistory">
			<item value="File = new"/>
			<item value="central"/>
			<item value="getMutualFriends"/>
			<item value="/**&#x0A; *&#x0A; */&#x0A;package application;&#x0A;&#x0A;import java.io.File;&#x0A;import java.io.FileNotFoundException;&#x0A;import java.util.ArrayList;&#x0A;import java.util.Set;&#x0A;&#x0A;import javafx.application.Application;&#x0A;import javafx.event.EventHandler;&#x0A;import javafx.geometry.Insets;&#x0A;import javafx.geometry.Pos;&#x0A;import javafx.scene.Scene;&#x0A;import javafx.scene.control.Button;&#x0A;import javafx.scene.control.Label;&#x0A;import javafx.scene.control.TextField;&#x0A;import javafx.scene.input.MouseEvent;&#x0A;import javafx.scene.layout.BorderPane;&#x0A;import javafx.scene.layout.HBox;&#x0A;import javafx.scene.layout.VBox;&#x0A;import javafx.scene.text.Font;&#x0A;import javafx.stage.Stage;&#x0A;&#x0A;/**&#x0A; * @author chrisgeorge&#x0A; *&#x0A; */&#x0A;public class Main extends Application {&#x0A;&#x0A;    SocialNetwork sn = new SocialNetwork();&#x0A;    private Stage stage = new Stage();&#x0A;&#x0A;&#x0A;    private static final int WINDOW_WIDTH = 1400;&#x0A;    private static final int WINDOW_HEIGHT = 700;&#x0A;    private static final String APP_TITLE = &quot;SocialNetwork&quot;;&#x0A;    public VBox signUpBox = new VBox();&#x0A;    public VBox twoInputBox = new VBox();&#x0A;    public VBox centerBox = new VBox();&#x0A;    public VBox bottomBox = new VBox();&#x0A;    public HBox topBox = new HBox();&#x0A;    private BorderPane root = new BorderPane();&#x0A;&#x0A;    /**&#x0A;     * setup for the stage to display the GUI&#x0A;     */&#x0A;    @Override&#x0A;    public void start(Stage primaryStage) throws Exception {&#x0A;        setUpCenterBox();&#x0A;        setUpTopBox();&#x0A;        setUpSignUpBox();&#x0A;        setUpRightBox();&#x0A;        setUpBottomBox(&quot;&quot;, &quot;&quot;);&#x0A;&#x0A;        Scene mainScene = new Scene(root, WINDOW_WIDTH, WINDOW_HEIGHT);&#x0A;        root.setStyle(&quot;-fx-background-color: #9e9eff;&quot;);&#x0A;        // Add the stuff and set the primary stage&#x0A;        primaryStage.setTitle(APP_TITLE);&#x0A;        primaryStage.setScene(mainScene);&#x0A;        this.stage = primaryStage;&#x0A;        stage.show();&#x0A;    }&#x0A;&#x0A;    /**&#x0A;     * contains the items in the middle of the stage-- the user buttons and the friendsList when the&#x0A;     * user button is clicked, its friends list is displayed&#x0A;     */&#x0A;    public void setUpCenterBox() {&#x0A;        VBox vbox = new VBox();&#x0A;        VBox friendsList = new VBox();&#x0A;        HBox hbox = new HBox();&#x0A;&#x0A;        int i = 1;&#x0A;        for (Graph g : sn.getConnectedComponents()) {&#x0A;            VBox component = new VBox();&#x0A;            component.getChildren().add(new Label(&quot;    Component &quot; + i + &quot;:    &quot;));&#x0A;            for (Person u : g.getAllVertices()) {&#x0A;                // hbox.getChildren().add(new Button(u.getName()));&#x0A;                Button user = new Button(u.getName());&#x0A;                component.getChildren().add(user);&#x0A;                component.setAlignment(Pos.CENTER);&#x0A;                user.setOnMouseClicked(e -&gt; showFriendsList(user, friendsList));&#x0A;            }&#x0A;            hbox.getChildren().add(component);&#x0A;            i++;&#x0A;&#x0A;        }&#x0A;        Label top = new Label(&quot;Click on a User to set as Central User and to see their friends \t&quot;);;&#x0A;&#x0A;        vbox.getChildren().add(top);&#x0A;        vbox.getChildren().add(hbox);&#x0A;        vbox.getChildren().add(friendsList);&#x0A;&#x0A;        root.setCenter(vbox); // display goes in the center of the BorderPane&#x0A;        hbox.setAlignment(Pos.CENTER);&#x0A;        vbox.setAlignment(Pos.CENTER);&#x0A;&#x0A;        hbox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;        vbox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;    }&#x0A;&#x0A;&#x0A;    /**&#x0A;     * displays the list of friends for the user whose button is clicked&#x0A;     *&#x0A;     */&#x0A;    private void showFriendsList(Button button, VBox vbox) {&#x0A;        sn.central = sn.graph.getNode(button.getText());&#x0A;        vbox.getChildren().clear(); // clears out previous friends list&#x0A;        vbox.getChildren().add(new Label(&quot;\tFriends: \n\n&quot;));&#x0A;        ArrayList&lt;Person&gt; friendsList = new ArrayList&lt;Person&gt;();&#x0A;        friendsList.addAll(sn.getFriends(button.getText()));&#x0A;        for (int i = 0; i &lt; friendsList.size(); i++) {&#x0A;            vbox.getChildren().add(new Label(friendsList.get(i).getName()));&#x0A;        }&#x0A;    }&#x0A;&#x0A;&#x0A;    /**&#x0A;     * Initializes buttons and adds them to the box in the top pane, also initializes event handlers&#x0A;     * for when the buttons are clicked on&#x0A;     */&#x0A;    public void setUpTopBox() {&#x0A;        // initialize buttons and set their event handlers&#x0A;        // TODO add event handlers to each button&#x0A;&#x0A;        VBox vbox = new VBox();&#x0A;&#x0A;        Label title = new Label(&quot;SOCIAL NETWORK&quot;);&#x0A;        title.setFont(new Font(&quot;Impact&quot;, 80));&#x0A;        BorderPane.setAlignment(title, Pos.CENTER);&#x0A;&#x0A;        Button clear = new Button(&quot;Clear&quot;);&#x0A;        clear.setOnMouseClicked(e -&gt; clear(clear));&#x0A;&#x0A;        Button load = new Button(&quot;Load data file&quot;);&#x0A;&#x0A;        Button export = new Button(&quot;Export&quot;);&#x0A;        Stage exportStage = setExportStage();&#x0A;        export.setOnMouseClicked(e -&gt; exportStage.show());&#x0A;&#x0A;        Button exit = new Button(&quot;Exit&quot;);&#x0A;        Stage newStage = setExitStage();&#x0A;        exit.setOnMouseClicked(e -&gt; newStage.show());&#x0A;&#x0A;        // add the buttons to a horizontal box&#x0A;        topBox.getChildren().addAll(clear, load, export, exit);&#x0A;&#x0A;        topBox.setAlignment(Pos.CENTER);&#x0A;        topBox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;&#x0A;        vbox.getChildren().addAll(topBox, title);&#x0A;        vbox.setAlignment(Pos.CENTER);&#x0A;&#x0A;        root.setTop(vbox);&#x0A;    }&#x0A;&#x0A;    private void clear(Button button) {&#x0A;        if (button.getText().equals(&quot;Clear&quot;)) {&#x0A;            sn = new SocialNetwork();&#x0A;            setUpBottomBox(&quot;Social network cleared.&quot;, &quot;&quot;);&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;    }&#x0A;&#x0A;    private Stage setExportStage() {&#x0A;        Stage exportStage = new Stage();&#x0A;        VBox vbox = new VBox();&#x0A;        HBox hbox = new HBox();&#x0A;&#x0A;        TextField fileName = new TextField(&quot;file name&quot;);&#x0A;        Button export = new Button(&quot;Export&quot;);&#x0A;        hbox.getChildren().add(new Label(&quot;Name the file: &quot;));&#x0A;        hbox.getChildren().add(fileName);&#x0A;        vbox.getChildren().addAll(hbox, export);&#x0A;&#x0A;        export.setOnMouseClicked(e -&gt; exportSave(exportStage, fileName));&#x0A;&#x0A;        Scene newScene = new Scene(vbox);&#x0A;        exportStage.setScene(newScene);&#x0A;        return exportStage;&#x0A;    }&#x0A;&#x0A;    private void exportSave(Stage exportStage, TextField fileName) {&#x0A;        File file = new File(fileName.getText());&#x0A;        try {&#x0A;            sn.saveToFile(file);&#x0A;        } catch (FileNotFoundException e) {&#x0A;            // TODO Auto-generated catch block&#x0A;            e.printStackTrace();&#x0A;        }&#x0A;        exportStage.close();&#x0A;    }&#x0A;&#x0A;    private Stage setExitStage() {&#x0A;        Stage newStage = new Stage();&#x0A;        VBox vbox = new VBox();&#x0A;        HBox hbox1 = new HBox();&#x0A;        hbox1.getChildren().add(new Label(&quot;You can either &apos;Save and Exit&apos; or &apos;Exit without saving&apos;&quot;));&#x0A;        HBox hbox2 = new HBox();&#x0A;        Button button1 = new Button(&quot;Save and Exit&quot;);&#x0A;        TextField textField = new TextField();&#x0A;        hbox2.getChildren().addAll(new Label(&quot;Name the file &quot;), textField, button1);&#x0A;        HBox hbox3 = new HBox();&#x0A;        Button button2 = new Button(&quot;Exit without saving&quot;);&#x0A;        hbox3.getChildren().add(button2);&#x0A;        hbox3.setAlignment(Pos.CENTER);&#x0A;        vbox.getChildren().addAll(hbox1, hbox2, hbox3);&#x0A;        Scene newScene = new Scene(vbox);&#x0A;        newStage.setScene(newScene);&#x0A;        button1.setOnMouseClicked(e -&gt; saveAndExit(newStage, textField));&#x0A;        button2.setOnMouseClicked(e -&gt; exit(newStage));&#x0A;        return newStage;&#x0A;    }&#x0A;&#x0A;    private void saveAndExit(Stage newStage, TextField filename) {&#x0A;        File file = new File(filename.getText());&#x0A;        try {&#x0A;            sn.saveToFile(file);&#x0A;        } catch (FileNotFoundException e) {&#x0A;            e.printStackTrace();&#x0A;        }&#x0A;        newStage.close();&#x0A;        stage.close();&#x0A;    }&#x0A;    private void exit(Stage newStage) {&#x0A;        newStage.close();&#x0A;        stage.close();&#x0A;    }&#x0A;&#x0A;    /**&#x0A;     * Displays a status label at the bottom of the GUI that indicates the most recent action&#x0A;     * performed by the user&#x0A;     *&#x0A;     * @param action representing the most recent action of the user&#x0A;     */&#x0A;    public void setUpBottomBox(String status, String networkInfo) {&#x0A;        VBox vbox = new VBox();&#x0A;&#x0A;        Label networkInfoPane = new Label(networkInfo);&#x0A;        networkInfoPane.setFont(new Font(&quot;Verdana&quot;, 30));&#x0A;&#x0A;        Label statusBar = new Label(&quot;Status: &quot; + status);&#x0A;        statusBar.setFont(new Font(&quot;Verdana&quot;, 30));&#x0A;&#x0A;        vbox.getChildren().add(networkInfoPane);&#x0A;        vbox.getChildren().add(statusBar);&#x0A;&#x0A;        vbox.setAlignment(Pos.CENTER);&#x0A;        root.setBottom(vbox);&#x0A;&#x0A;    }&#x0A;&#x0A;    /**&#x0A;     * Displays interface to add a user&#x0A;     */&#x0A;    public void setUpSignUpBox() {&#x0A;        // Creates boxes&#x0A;        VBox vbox = new VBox();&#x0A;        HBox hbox = new HBox();&#x0A;        Button button = new Button(&quot;Add New User&quot;);&#x0A;        Button removeButton = new Button(&quot;Remove User&quot;);&#x0A;&#x0A;        // Adds content to the box within a box&#x0A;        TextField input = new TextField();&#x0A;&#x0A;&#x0A;        hbox.getChildren().addAll(new Label(&quot;Username: &quot;), input);&#x0A;        vbox.getChildren().addAll(hbox, button, removeButton);&#x0A;&#x0A;        // Aligns the contents in the center of the box&#x0A;        vbox.setAlignment(Pos.CENTER);&#x0A;        hbox.setPadding(new Insets(10, 10, 10, 10));&#x0A;        root.setLeft(vbox);&#x0A;        vbox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;        hbox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;        button.setOnMouseClicked(e -&gt; addNewUser(button, input));&#x0A;        removeButton.setOnMouseClicked(e -&gt; removeNewUser(removeButton, input));&#x0A;    }&#x0A;&#x0A;    private void addNewUser(Button button, TextField input) {&#x0A;        if (button.getText().equals(&quot;Add New User&quot;)) {&#x0A;            if (sn.addUser(input.getText()))&#x0A;                setUpBottomBox(&quot;New user &quot; + input.getText() + &quot; was added to the network.&quot;, &quot;&quot;);&#x0A;            else&#x0A;                setUpBottomBox(&quot;Invalid - user is already in the network.&quot;, &quot;&quot;);&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;    }&#x0A;&#x0A;    private void removeNewUser(Button button, TextField input) {&#x0A;        if (button.getText().equals(&quot;Remove User&quot;)) {&#x0A;            boolean complete = sn.removeUser(input.getText());&#x0A;            if (complete) {&#x0A;                setUpBottomBox(&quot;User &quot; + input.getText() + &quot; removed&quot;, &quot;&quot;);&#x0A;            } else {&#x0A;                setUpBottomBox(&quot;User &quot; + input.getText() + &quot; does not exist&quot;, &quot;&quot;);&#x0A;            }&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;    }&#x0A;&#x0A;    /**&#x0A;     * Private helper method that sets up the VBox that allows the user to enter the name of two&#x0A;     * people and add a friendship between them&#x0A;     *&#x0A;     */&#x0A;    public void setUpRightBox() {&#x0A;&#x0A;        // Friendship textfields and buttons&#x0A;        HBox hbox = new HBox();&#x0A;        HBox hbox2 = new HBox();&#x0A;        hbox.setPadding(new Insets(0, 10, 10, 0));&#x0A;        hbox2.setPadding(new Insets(0, 10, 10, 0));&#x0A;&#x0A;        // Mutual Friends textfields and buttons&#x0A;        HBox hbox3 = new HBox();&#x0A;        HBox hbox4 = new HBox();&#x0A;        hbox3.setPadding(new Insets(0, 10, 10, 0));&#x0A;        hbox4.setPadding(new Insets(0, 10, 10, 0));&#x0A;&#x0A;        // creates textfields for friendships&#x0A;        TextField t1 = new TextField();&#x0A;        TextField t2 = new TextField();&#x0A;        t1.setPrefWidth(100);&#x0A;        t2.setPrefWidth(100);&#x0A;&#x0A;        // adds label and textfield to it&apos;s respective hbox&#x0A;        hbox.getChildren().addAll(new Label(&quot;Person One: &quot;), t1);&#x0A;        hbox2.getChildren().addAll(new Label(&quot;Person Two: &quot;), t2);&#x0A;&#x0A;        // creates button to add friendship between people&#x0A;        Button addF = new Button(&quot;Add Friendship&quot;);&#x0A;        Button removeF = new Button(&quot;Remove Friendship&quot;);&#x0A;        Button mutualF = new Button(&quot;Show Mutual Friends&quot;);&#x0A;        Button shortest = new Button(&quot;Find Shortest Path&quot;);&#x0A;        addF.setAlignment(Pos.BASELINE_RIGHT);&#x0A;&#x0A;        // adds controls to vbox and borderpane&#x0A;        twoInputBox.getChildren().addAll(hbox, hbox2, addF, removeF, mutualF, shortest);&#x0A;        twoInputBox.setAlignment(Pos.CENTER);&#x0A;&#x0A;&#x0A;        twoInputBox.setStyle(&quot;-fx-font-weight: bold&quot;);&#x0A;        root.setRight(twoInputBox);&#x0A;        addF.setOnMouseClicked(e -&gt; addFriendship(addF, t1, t2));&#x0A;        removeF.setOnMouseClicked(e -&gt; removeFriendship(removeF, t1, t2));&#x0A;        mutualF.setOnMouseClicked(e -&gt; getMutualFriends(mutualF, t1, t2));&#x0A;        // shortest.setOnMouseClicked(e -&gt; );&#x0A;    }&#x0A;&#x0A;    private void addFriendship(Button button, TextField user1, TextField user2) {&#x0A;        if (button.getText().equals(&quot;Add Friendship&quot;)) {&#x0A;            if (sn.addFriends(user1.getText(), user2.getText()))&#x0A;                setUpBottomBox(&quot;Friendship added between &quot; + user1.getText() + &quot; and &quot; + user2.getText(),&#x0A;                        &quot;&quot;);&#x0A;            else&#x0A;                setUpBottomBox(&quot;Invalid input - friendship already exists&quot;, &quot;&quot;);&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;&#x0A;    }&#x0A;&#x0A;    private void removeFriendship(Button button, TextField user1, TextField user2) {&#x0A;        if (button.getText().equals(&quot;Remove Friendship&quot;)) {&#x0A;            boolean complete = sn.removeFriends(user1.getText(), user2.getText());&#x0A;            if (complete) {&#x0A;                setUpBottomBox(&#x0A;                        &quot;Friendship between &quot; + user1.getText() + &quot; and &quot; + user2.getText() + &quot; removed&quot;, &quot;&quot;);&#x0A;            } else {&#x0A;                setUpBottomBox(&quot;Invalid input - make sure both users exist and are friends.&quot;,&#x0A;                        &quot;&quot;);&#x0A;            }&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;&#x0A;    }&#x0A;&#x0A;    private void getMutualFriends(Button button, TextField user1, TextField user2) {&#x0A;        if (button.getText().equals(&quot;Show Mutual Friends&quot;)) {&#x0A;            Set&lt;Person&gt; mutualList = sn.getMutualFriends(user1.getText(), user2.getText());&#x0A;            String s = &quot;List of mutual friends between &apos;&quot; + user1.getText() + &quot;&apos; and &apos;&quot; &#x0A;                    + user2.getText() + &quot;&apos;: &quot;;&#x0A;            if(mutualList.size() == 0)&#x0A;                s = &quot;No mutual friends.&quot;;&#x0A;            else {&#x0A;                for(Person u : mutualList)&#x0A;                    s += u.getName() + &quot;, &quot;;&#x0A;                s = s.substring(0, s.length() - 2);&#x0A;            }&#x0A;            setUpBottomBox(&quot;Completed.&quot;, s);&#x0A;            setUpCenterBox();&#x0A;        }&#x0A;    }&#x0A;&#x0A;    //TODO shortest path handler&#x0A;&#x0A;    /**&#x0A;     * @param args&#x0A;     */&#x0A;    public static void main(String[] args) {&#x0A;        launch(args);&#x0A;&#x0A;    }&#x0A;&#x0A;}"/>
			<item value="mutual"/>
			<item value="sn.graph"/>
			<item value="SOCIAL NETWORK"/>
			<item value="system.out.print"/>
			<item value="input"/>
			<item value="addnewuser"/>
			<item value="adnew"/>
			<item value="printwriter"/>
			<item value="system.out.println"/>
			<item value="sortTopDown"/>
			<item value="get()"/>
		</list>
		<list key="replacehistory">
			<item value="System.err.println"/>
			<item value="Config.WALL_CHAR"/>
			<item value="Config.BOX_CHAR"/>
			<item value="Config.EMPTY_CHAR"/>
			<item value="Config.Enpty."/>
			<item value=" Config.BOX_CHAR"/>
			<item value="Config.WORKER_CHAR"/>
			<item value=" "/>
		</list>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item key="DIALOG_WIDTH" value="290"/>
		<item key="DIALOG_FONT_NAME" value="1|.AppleSystemUIFont|11.0|0|COCOA|1|.AppleSystemUIFont"/>
		<item key="DIALOG_HEIGHT" value="409"/>
		<item key="DIALOG_X_ORIGIN" value="1115"/>
		<item key="DIALOG_Y_ORIGIN" value="0"/>
	</section>
</section>
